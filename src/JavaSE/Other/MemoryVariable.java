package JavaSE.Other;

public class MemoryVariable {
    /*
    栈（stack）： 存储局部变量， 方法执行区
                局部变量： 参数 或者 方法内设的变量
                作用域： 一旦超出作用域， 立刻从栈内存中消失
    堆（heap）： new出来的东西
                有地址值，16进制
                有默认值： int 0, float 0.0 etc
    方法区（method area）： .class 信息，包含方法信息

    本地方法栈 （native method stack）
    寄存器（pc register）
     */
    public static void main(String[] args) {
        System.out.println("淦！");
    }
}
/*
   成员变量（全局变量）：定义在方法外 在堆中（类内）
   局部变量：定义在方法内 在栈中
   静态变量：方法区？
   成员方法不写static

   局部变量与成员变量

   1. 定义位置不同
   局部： 在方法内
   成员： 在方法外，在类当中

   2. 作用范围不一样
   局部： 只有在方法内使用，出了方法不能用（因为在栈内，随方法消失而消失）
   成员： 整个类都可以用（在堆内）

   3. 默认值不一样
   局部： 无默认值， 如若使用，手动赋值（栈内无默认值）
   成员： 有默认值，规则如数组（堆内有默认值）

   4. 内存位置不一样
   局部： 栈
   成员： 堆

   5. 生命周期不一样
   局部： 随着方法进栈而诞生，出栈而消失
   成员： 随着对象创建而诞生，随着对象被垃圾回收而消失
     */